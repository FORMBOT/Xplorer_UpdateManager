#################################################################################################################
################################# Orbiter Sensor CONFIGURATION ##################################################
#################################################################################################################


#### CONFIG BASED ON THE OFICIAL ORBITER Smart SENSOR Config ( Klipper Config/Orbiter2_SmartSensor.cfg // #config file version v3.0.02 // #release date: 22.12.2023 ). https://www.orbiterprojects.com/smart-sensor-for-orbiter-v2/  ####
                          #### Many Thanks to Dr. Róbert Lőrincz for this great project !!! ###

#########Setting Up For More Tools##################

# 'n' is the tool number begining with 0

#1. Copy the Confing and change the name of the config: 'Tn_OrbiterSensor.cfg'
#2. Overall in the config: replace 'T2' with 'Tn'
#3. Overall in the config: replace 't2' with 'tn'
#4. Overall in the config: replace 'Tool2' with 'Tooln'
#5. Overall in the config: replace 'filament_change_state12' with 'filament_change_state12n'
#6. Overall in the config: replace 'filament_change_state22' with 'filament_change_state22n'
#7. Overall in the config: replace  'extruder2' with 'extruder2n' 
#8. Give the corresponding pin for 'filament_switch_sensor' and 'gcode_button unload_Tool2'
#9. Insert the config in 'printer.cfg': [include Tn_OrbiterSensor.cfg]


#################################################################################################################
################################# CHANGE HERE MACRO CONFIGURABLES################################################
#################################################################################################################




#///////////////////////////filament sensor button macros/////////////////////////////////////////////////

[filament_switch_sensor T2_sensor]
switch_pin: Tool2: PB3
pause_on_runout: False
runout_gcode: 
  runnout_init_t2
insert_gcode: startload_Tool2
event_delay: 1.0
pause_delay: 0.1

#********************************************************************************************************

#////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////
[gcode_button unload_Tool2]
pin: Tool2: PB4 # remove the negation "!" for sensor v1 - use just PA9 as example
press_gcode:  # filament unload procedure
    unload_tangle_t2
release_gcode: # do not add any macro call here

#################################################################################################################################
####################################### DO NOT CHANGE ANYTHING BELOW THIS LINE!!! ###############################################
#################################################################################################################################
####################################### UNLESS YOU KNOW WHAT YOU ARE DOING OR YOU ARE BORED AND NEED TO DO SOMETHING OR YOU ARE ALONE AND NEED SOMETHING TO MESS UP YOUR LIFE OR YOU CAN DO IT BETTER THAN ME OR YOU ARE A REAL SMARTASS OR JUST BECAUSE YOU CAN OR YOU RUN OUT OF BEAR OR HAS NOTHING BETTER TO DO OR ANY UNREASONABLE REASON
#################################################################################################################################

[respond]
default_type: echo

[force_move]
enable_force_move: True

[gcode_macro runnout_init_t2]
gcode:
  ACTIVATE_EXTRUDER EXTRUDER=extruder2
  {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}  
  {% if(sensor.t2_disable_runnout|lower == 'false') %}
      filament_change_state12
  {% else %}
    M118 Filament Tool2 runnout is disabled in the sensor config file!   
  {% endif %} 

[gcode_macro filament_change_state12]
variable_changet2busy: 0
variable_temp_target: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}  
  {% if changet2busy == 0 %}
    M600 # call printer pause macro          
    M118 Filament Tool2 runnout!       
    {% if (sensor.t2_disable_autochange|lower == 'false') %}
      SET_GCODE_VARIABLE MACRO=filament_change_state12 VARIABLE=changet2busy VALUE=1       
      filament_change_state22   # comment this line if you do not want to automatically unload filament in case there is a runnout detected.
    {% endif %}  
  {% endif %}

[gcode_macro filament_change_state22]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}  
  SET_GCODE_VARIABLE MACRO=unload_tangle_t2 VARIABLE=loadt2busy VALUE=1  
  {% if (sensor.t2_enable_beep|lower == 'true') %} 
    M300 # beep sound
  {% endif %}
  M118 Unloading Tool2 ...   
  M83
  G92 E0   
  # {% if printer[printer.toolhead.extruder2].temperature < 185 %} # hardcoded threshold
  {% if (printer.extruder2.can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder2 config (to about 185)
      M118 Tool2 heating!        
      SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET={sensor.t2_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder2 MINIMUM={sensor.t2_unload_temp} #wait for reaching filament unload temp
      {% endif %}     
  {% if(printer.extruder2.target == 0) %} # checing for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
      SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET={sensor.t2_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder2 MINIMUM={sensor.t2_unload_temp} #wait for reaching filament unload temp
  {% endif %} 
  G0 E-5 F3600 	#extract filament to cold end
  G4 P2000 # wait for two seconds
  G0 E5 F3600 # push the filament back 
  G0 E-5 F3600 	#extract filament to cold end
  G0 E-{sensor.t2_unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
  M400   
  M118 Load new filament in Tool2! Wait until is loaded, then resume printing.  
  SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET=0 # swicth off heater
  UPDATE_DELAYED_GCODE ID=clear_loadt2busy DURATION=0.5
  UPDATE_DELAYED_GCODE ID=clear_changet2busy DURATION=0.5

[gcode_macro startload_Tool2]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.t2_disable_autoload|lower == 'false') %}
      SET_GCODE_VARIABLE MACRO=unload_tangle_t2 VARIABLE=loadt2busy VALUE=1
      load_Tool2
    {% else %}
    M118 Filament auto-load is disabled in the sensor config file!   
    {% endif %} 
  {% else %}    
    M118 Printing! Can't load filament right now!    
  {% endif %} 
 # SET_GCODE_VARIABLE MACRO=unload_Tool2 VARIABLE=filamentpresent VALUE=1
  #UPDATE_DELAYED_GCODE ID=clear_changet2busy DURATION=2  

[gcode_macro load_Tool2]
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder2    
    {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}
      {% set USER_TEMP = printer.extruder2.target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %} 
      #M118 USER TEMP {USER_TEMP}      # echo back for debug only      
        {% if (printer.extruder2.can_extrude|lower != 'true') or (printer.extruder2.target < sensor.t2_load_min_temp) %} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder2 config (to about 185)                        
          SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET={sensor.t2_load_temp} # set user defined load temperature
          {% set LOAD_TEMP = sensor.t2_load_temp %} # save user set temperature before loading           
         M118 Tool2 heating! 
        {% endif %}     
    {% if (sensor.t2_enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 Tool2 loading!  
    M82           #set extruder2 to absolute mode
    G92 E0
    G4 P1500        # wait for 1.5 seconds
    FORCE_MOVE STEPPER=extruder2 DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
    TEMPERATURE_WAIT SENSOR=extruder2 MINIMUM={LOAD_TEMP} # wait for reaching set temperature    
    TEMPERATURE_WAIT SENSOR=extruder2 MINIMUM={USER_TEMP} # wait for reaching set temperature    
    G1 E{sensor.t2_purge_length} F{sensor.t2_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    {% if (printer.extruder2.target > 0) %} # checking if a temperature was previous set
      SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET={USER_TEMP} # restore user temp if it was set before loading                     
    {% else %}
      M104 S185 T2 # the hotend will remain warm         
      M118 Tool2 remains warm
    {% endif %} 
    M118 Tool2 load complete!   
    UPDATE_DELAYED_GCODE ID=clear_loadt2busy DURATION=2   
 

#############################################END filament auto load macro section END***********************************************************
#############################################filament auto unload and Tangle macro section*****************************************************************
[gcode_macro unload_tangle_t2]
variable_loadt2busy: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}
  {% if (printer.print_stats.state == "printing") %} # filament tangle detection during printing  
    {% if(sensor.t2_disable_tangle|lower == 'false') %} # run tangle detection macro if enabled
      filament_tangle_t2   
    {% else %} #filament tangle disabled send message to console
      M118 Filament tangle detected on Tool2, action disabled!
    {% endif %} 
  {% else %} #filament unload button pressed
      #{% if (printer.print_stats.state != "paused" and loadt2busy == 0) %} #enable unload if not printing and not paused
      {% if (loadt2busy == 0) %} #enable unload if not printing 
        {% if(sensor.t2_disable_autounload|lower == 'false') %} # run unload macro if enabled
          unload_Tool2
        {% endif %}
      {% endif %}
  {% endif %}

[gcode_macro unload_Tool2] 
#variable_filamentpresent: 0
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder2
    {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}
      {% if (sensor.t2_enable_beep|lower == 'true') %} 
        M300 # beep sound
      {% endif %}
      M118 Tool2 unloading!    
      M83
      G92 E0     
      {% if (printer.extruder2.can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder2 config (to about 185)
        M118 Tool2 heating!          
        SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET={sensor.t2_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder2 MINIMUM={sensor.t2_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      {% if(printer.extruder2.target == 0) %} # checing for set temperature if is zero than set to 185 / hotend hot but cooling due to set target temp 0
        TEMPERATURE_WAIT SENSOR=extruder2 MINIMUM={sensor.t2_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      G0 E10 F500 # extruder2 20mm of filament before extracting 
      G0 E-5 F3600 	#extract filament to cold end
      G4 P2000 # wait for two seconds
      G0 E6 F3600 # push the filament back 
      G0 E-10 F3600 	#extract filament to cold end
      G0 E-{sensor.t2_unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
      #M104 S0 T2 # the hotend will remain warm
      M400 # wait to complete unload
      M118 Tool2 unload complete!    

[gcode_macro filament_tangle_t2] 
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_t2_VARIABLES'] %}
  M118 Filament tangle detected on Tool2, print paused!
  M600
  {% if (sensor.t2_enable_beep|lower == 'true') %} 
    M300 # beep sound
  {% endif %}
  M600
    

#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode clear_unloadt2busy]
gcode:
  SET_GCODE_VARIABLE MACRO=unload_Tool2 VARIABLE=unloadt2busy VALUE=0
  #M118 Clear Unload busy! 

[delayed_gcode clear_changet2busy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state12 VARIABLE=changet2busy VALUE=0
  #M118 Clear Load busy!  

[delayed_gcode clear_loadt2busy]
gcode:
  SET_GCODE_VARIABLE MACRO=unload_tangle_t2 VARIABLE=loadt2busy VALUE=0
  #M118 Clear Load busy!  
